version: '3.1'
services:
  postgresql-book:
    image: postgres
    ports:
      - "8281:5432"
    environment:
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_DB=postgres
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - book-network

  book-service-api:
    build: ./book-service
    image: book-service
    ports:
      - "8181:8080"
      - "8381:8381" # Debug port
    depends_on:
      postgresql-book:
        condition: service_healthy
    environment:
      - USER_API=http://user-service-api:8080/users/
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgresql-book:5432/postgres?autoReconnect=true&useSSL=false
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=postgres
      - SPRING_JPA_HIBERNATE_DDL_AUTO=update
    networks:
      - book-network
      - book-user-network
      - kafka-network

  postgresql-user:
    image: postgres
    ports:
      - "8282:5432"
    environment:
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_DB=postgres
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - user-network

  user-service-api:
    build: ./user-service
    image: user-service
    ports:
      - "8182:8080"
      - "8382:8382" # Debug port
    depends_on:
      postgresql-user:
        condition: service_healthy
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgresql-user:5432/postgres?autoReconnect=true&useSSL=false
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=postgres
      - SPRING_JPA_HIBERNATE_DDL_AUTO=update
    networks:
      - user-network
      - book-user-network
      - kafka-network

  frontend:
    build: ./frontend
    ports:
      - "8080:80"
    networks:
      - book-user-network

  zookeeper:
    image: wurstmeister/zookeeper:3.4.6
    ports:
      - "2181:2181"
    networks:
      - kafka-network
    volumes:
      - zookeeper-data:/tmp/zookeeper

  kafka:
    image: wurstmeister/kafka:latest
    ports:
      - "9092:9092"
    environment:
      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:9093,OUTSIDE://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_LISTENERS: INSIDE://0.0.0.0:9093,OUTSIDE://0.0.0.0:9092
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - kafka-data:/kafka-log
    depends_on:
      - zookeeper
    networks:
      - kafka-network

networks:
  book-network:
  user-network:
  book-user-network:
  kafka-network:

volumes:
  kafka-data:
  zookeeper-data:
